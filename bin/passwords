#!/usr/bin/perl

# ################################################################
# Copyright [2006-7] [Simon Fraser/Siniatech Ltd]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ################################################################

# ################################################################
# Encrypts and decrypts stored passwords
#
# Adds a prefix to all the filenames of the specified files
#
# Author:    Simon Fraser
#            simon@siniatech.com
# Version:   1.2
# Date:      2007-03-16
# Source:    http://github.com/siniatech/linuxUtils
#
# Changes:   1.2 - Added functionality to return list of domains
#            1.1 - Stored username and encrypted domain
#            1.0 - Initial Version
# ################################################################

use strict;

use Crypt::RC4;
use Storable;

my $NOECHO= "stty -echo";
my $ECHO= "stty echo";

if ($#ARGV != 0) {
  print "Usage: $0 <password_file>\n\n";
  exit 1;
}

my $passwordFile= @ARGV[0];

my %passwords;

sub addPassword {
  my $domain= shift;
  my $username= shift;
  my $password= shift;
  my $key= shift;

  chomp $domain;
  chomp $username;
  chomp $password;

  my ($encryptedDomain, $encryptedUnPwd)= map RC4($key, $_), ($domain, $username . "::::" . $password);
  $passwords{$encryptedDomain}= $encryptedUnPwd;

  return 0;
} 

sub getPassword {
  my $domain = shift;
  my $key= shift;

  chomp $domain;

  my $encryptedDomain= RC4($key, $domain);
  my ($username, $password)= split /::::/, RC4($key, $passwords{$encryptedDomain});

  print "\nUsername is " . $username . "\n";
  print "Password is " . $password . "\n\n";
}

sub echoDomains {
  my $key= shift;
  print map " - " . RC4($key, $_) . "\n", keys %passwords;
}

if (-e $passwordFile) {
    %passwords = %{ retrieve $passwordFile or die "Couldn't load passwords file: $@\n" };
} 

while (1) {
  print "Menu: \n";
  print "  1> Add\n";
  print "  2> Retrieve\n";
  print "  3> Echo available domains\n";
  print "   > ";
  my $choice= <STDIN>;
  last if $choice =~ /^$/;

  if ($choice == 1) {
    print "Enter domain: ";
    my $domain= <STDIN>;
    print "Enter username: ";
    my $username= <STDIN>;
    print "Enter password: ";
    system($NOECHO);
    my $password= <STDIN>;
    system($ECHO);
    print "\nEnter key: ";
    system($NOECHO);
    my $key= <STDIN>;
    system($ECHO);
    print "\n";
    &addPassword($domain,$username,$password,$key);
  } elsif ($choice == 2) {
    print "Enter domain: ";
    my $domain= <STDIN>;
    print "Enter key: ";
    system($NOECHO);
    my $key= <STDIN>;
    system($ECHO);
    print "\n";
    &getPassword($domain,$key);
  } elsif ($choice == 3) {
    print "Enter key: ";
    system($NOECHO);
    my $key= <STDIN>;
    system($ECHO);
    print "\n";
    &echoDomains($key);
  } else {
    print "Invalid choice!\n\n";
  }
}

store \%passwords, $passwordFile or die "Couldn't save passwords file: $@\n";

